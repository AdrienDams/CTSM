#! /usr/bin/env python3
"""
Script to rename and upload NEON site finidat files for use in transient startup cases

"""

import os, sys
# Get the ctsm util tools and then the cime tools.
_CTSM_PYTHON = os.path.abspath(os.path.join(os.path.dirname(__file__), "..","..",'python'))
sys.path.insert(1, _CTSM_PYTHON)

import boto3
from botocore.exceptions   import ClientError
import glob
import datetime
from ctsm                  import add_cime_to_path
from ctsm.path_utils       import path_to_ctsm_root
from standard_script_setup import *
from CIME.case             import Case
from CIME.utils            import expect, safe_copy

logger = logging.getLogger(__name__) 

def get_parser(args, description, valid_neon_sites):
    """
    Get Parser object for this script
    """
    parser = argparse.ArgumentParser(description=description,
                           formatter_class=argparse.RawDescriptionHelpFormatter)

    CIME.utils.setup_standard_logging_options(parser)
    
    parser.print_usage = parser.print_help

    parser.add_argument('--neon-sites',
                        help='4-letter neon site code.', 
                        action="store",
                        required=False,
                        choices=valid_neon_sites + ['all'],
                        dest="neon_sites",
                        default=["OSBS"],
                        nargs='+')

    parser.add_argument('--output-root',
                help='''
                Root Directory of case results
                [default: %(default)s] 
                ''',
                action="store", 
                dest="output_root",
                type =str,
                required=False,
                        default=os.getcwd())

    parser.add_argument('--file-date',
                        help='''
                        Date of ctsm restart file(s) to upload
                        ''',
                        action="store", 
                        dest="file_date",        
                        required = False,
                        type = datetime.date.fromisoformat,
                        default = datetime.datetime.strptime("0268-01-01",'%Y-%m-%d'))



    args = CIME.utils.parse_args_and_handle_standard_logging_options(args, parser)

    if 'all' in args.neon_sites:
        neon_sites = valid_neon_sites
    else:
        neon_sites = args.neon_sites
        for site in neon_sites:
            if site not in valid_neon_sites:
                raise ValueError("Invalid site name {}".format(site))

    return neon_sites, args.output_root, args.file_date

def upload_file(file_name, bucket, object_name=None):
    """Upload a file to an S3 bucket

    :param file_name: File to upload
    :param bucket: Bucket to upload to
    :param object_name: S3 object name. If not specified then file_name is used
    :return: True if file was uploaded, else False
    """

    # If S3 object_name was not specified, use file_name
    if object_name is None:
        object_name = os.path.basename(file_name)

    # Upload the file
    s3_client = boto3.client('s3')
    try:
        response = s3_client.upload_file(file_name, bucket, object_name)
    except ClientError as e:
        logger.error(e)
        return False
    return True

def main(description):
    """
    For each site in the site_list find the site.postad run directory and grab the latest clm restart file
    from there, 
    """

    if not os.path.isfile(os.path.join(os.getenv("HOME"),".aws","credentials")):
        raise FileNotFoundError("User account must have valid aws credentials to run this script.")

    cesmroot = path_to_ctsm_root()
    # Get the list of supported neon sites from usermods
    valid_neon_sites = glob.glob(os.path.join(cesmroot,"cime_config","usermods_dirs","NEON","[!d]*"))
    valid_neon_sites = [v.split('/')[-1] for v in valid_neon_sites]
    filedatestamp = datetime.datetime.now().date()
    site_list, output_root, file_date = get_parser(sys.argv, description, valid_neon_sites)
    for site in site_list:
        rundir = None
        case_path = os.path.join(output_root, site+".postad")
        if os.path.isdir(case_path):
            with Case(case_path) as case:
                rundir = case.get_value("RUNDIR")
                basefile = site+".postad.clm2.r.{}-00000.nc".format(file_date.strftime("%4Y-%m-%d"))
                finidat_file = os.path.join(rundir,basefile)
                if not os.path.isfile(finidat_file):
                    logger.warning("Could not find file {}".format(finidat_file))
                    continue
                newfile = basefile.replace(".postad.",".{}.".format(filedatestamp))
                
                upload_file(finidat_file, 'neon-ncar-transfer', newfile)



if __name__ == "__main__":
    main(__doc__) 

