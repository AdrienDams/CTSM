#!/usr/bin/env python

"""
build clm library
"""
import sys, os

_CIMEROOT = os.environ.get("CIMEROOT")
if _CIMEROOT is None:
    raise SystemExit("ERROR: must set CIMEROOT environment variable")

_LIBDIR = os.path.join(_CIMEROOT, "scripts", "Tools")
sys.path.append(_LIBDIR)

from standard_script_setup import *
from CIME.buildlib import parse_input
from CIME.build import get_standard_makefile_args
from CIME.case import Case
from CIME.utils import run_cmd, expect

logger = logging.getLogger(__name__)

###############################################################################
def _get_osvar(key, default):
###############################################################################
    if key in os.environ:
        value = os.environ[key]
    else:
        value = default
    return value

###############################################################################
def _write_ctsm_mk(exeroot, debug):
    """Writes a ctsm.mk file in exeroot.

    This file can be included by atmosphere model builds outside of cime.

    NOTE: This currently has some hard-coded settings for cheyenne. Also, it assumes that
    ESMFMKFILE is set in your environment.

    Arguments:
    exeroot (str): path to build directory
    debug (logical): True if building in debug mode, False otherwise
    """

    if debug:
        debug_path = 'debug'
    else:
        debug_path = 'nodebug'

    ctsm_mk_path = os.path.join(exeroot, 'ctsm.mk')
    esmfmkfile = os.environ['ESMFMKFILE']
    with open(ctsm_mk_path, 'w') as ctsm_mk:
        ctsm_mk.write("""
# ======================================================================
# Include this file to get makefile variables needed to include / link
# LILAC/CTSM in an atmosphere model's build
#
# Variables of interest are:
# - CTSM_INCLUDES: add this to the compilation line
# - CTSM_LIBS: add this to the link line
# ======================================================================

# ======================================================================
# The following settings are meant for internal use, and generally
# should not be included directly in an atmosphere model's build.
# ======================================================================

include {esmfmkfile}

SHARED_BLD_DIR = {exeroot}/intel/mpt/{debug_path}/nothreads/nuopc
CTSM_BLD_DIR   = $(SHARED_BLD_DIR)/nuopc/esmf
DEPENDS_LIB    = $(SHARED_BLD_DIR)/lib
SHR_LIB        = $(SHARED_BLD_DIR)/nuopc/esmf/c1a1l1/lib
SHR_INC        = $(SHARED_BLD_DIR)/nuopc/esmf/c1a1l1/csm_share
CTSM_INC       = $(CTSM_BLD_DIR)/clm/obj

LIBS = -L$(CTSM_BLD_DIR)/lib -lclm -L$(SHR_LIB) -lcsm_share -L$(DEPENDS_LIB) -lpiof -lpioc -lgptl -lmct -lmpeu -mkl=cluster  -L/glade/u/apps/ch/opt/pnetcdf/1.11.0/mpt/2.19/intel/19.0.2//lib -lpnetcdf -L/glade/u/apps/ch/opt/netcdf-mpi/4.6.1/mpt/2.19/intel/19.0.2/lib -Wl,-rpath,/glade/u/apps/ch/opt/netcdf-mpi/4.6.1/mpt/2.19/intel/19.0.2/lib -cxxlib -lrt -ldl -lnetcdff -lnetcdf -cxxlib

# ======================================================================
# The following settings should be included in an atmosphere model's build.
# ======================================================================

CTSM_INCLUDES = $(ESMF_F90COMPILEPATHS) -I$(SHR_INC) -I$(CTSM_INC)
CTSM_LIBS =  $(ESMF_F90LINKPATHS) $(ESMF_F90LINKRPATHS) $(ESMF_F90ESMFLINKLIBS) $(LIBS)
""".format(esmfmkfile=esmfmkfile, exeroot=exeroot, debug_path=debug_path))

###############################################################################
def _main_func():
###############################################################################

    caseroot, libroot, bldroot = parse_input(sys.argv)

    with Case(caseroot) as case:

        casetools = case.get_value("CASETOOLS")
        lnd_root = case.get_value("COMP_ROOT_DIR_LND")
        gmake_j = case.get_value("GMAKE_J")
        gmake = case.get_value("GMAKE")
        driver = case.get_value("COMP_INTERFACE").lower()

        lilac_mode = _get_osvar('LILAC_MODE', 'off')
        if lilac_mode == 'on':
            driver = "lilac"
            _write_ctsm_mk(exeroot=case.get_value("EXEROOT"),
                           debug=case.get_value("DEBUG"))

        #-------------------------------------------------------
        # create Filepath file
        #-------------------------------------------------------
        filepath_file = os.path.join(bldroot,"Filepath")
        if not os.path.isfile(filepath_file):
            caseroot = case.get_value("CASEROOT")

            paths = [os.path.join(caseroot,"SourceMods","src.clm"),
                     os.path.join(lnd_root,"src","main"),
                     os.path.join(lnd_root,"src","biogeophys"),
                     os.path.join(lnd_root,"src","biogeochem"),
                     os.path.join(lnd_root,"src","soilbiogeochem"),
                     os.path.join(lnd_root,"src","dyn_subgrid"),
                     os.path.join(lnd_root,"src","init_interp"),
                     os.path.join(lnd_root,"src","fates"),
                     os.path.join(lnd_root,"src","fates","main"),
                     os.path.join(lnd_root,"src","fates","biogeophys"),
                     os.path.join(lnd_root,"src","fates","biogeochem"),
                     os.path.join(lnd_root,"src","fates","fire"),
                     os.path.join(lnd_root,"src","utils"),
                     os.path.join(lnd_root,"src","cpl"),
                     os.path.join(lnd_root,"src","cpl",driver)]

            if lilac_mode == 'on':
                paths.append(os.path.join(lnd_root,"lilac","src"))
                mosart_src = os.path.join(lnd_root,"components","mosart","src") 
                paths.append(os.path.join(mosart_src,"riverroute"))
                paths.append(os.path.join(mosart_src,"cpl","lilac"))

            with open(filepath_file, "w") as filepath:
                filepath.write("\n".join(paths))
                filepath.write("\n")

        #-------------------------------------------------------
        # create the library in libroot
        #-------------------------------------------------------

        complib = os.path.join(libroot,"libclm.a")
        makefile = os.path.join(casetools, "Makefile")

        cmd = "{} complib -j {} MODEL=clm COMPLIB={} -f {} {}" \
              .format(gmake, gmake_j, complib, makefile, get_standard_makefile_args(case))

        rc, out, err = run_cmd(cmd)
        logger.info("%s: \n\n output:\n %s \n\n err:\n\n%s\n"%(cmd,out,err))
        expect(rc == 0, "Command %s failed with rc=%s" % (cmd, rc))

###############################################################################

if __name__ == "__main__":
    _main_func()
