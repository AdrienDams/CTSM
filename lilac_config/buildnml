#!/usr/bin/env python3

"""
CTSM namelist creator
"""

import sys
import os
import subprocess
import argparse

from configparser import ConfigParser
from configparser import NoSectionError, NoOptionError

_CONFIG_CACHE_TEMPLATE = """
<?xml version="1.0"?>
<config_definition>
<commandline></commandline>
<entry id="phys" value="{clm_phys}" list="" valid_values="clm4_5,clm5_0">Specifies clm physics</entry>
</config_definition>
"""

# Note the following is needed in env_lilac.xml otherwise the following error appears in
# the call to build_namelist

#err=ERROR : CLM build-namelist::CLMBuildNamelist::logical_to_fortran() :
# Unexpected value in logical_to_fortran:

_ENV_LILAC_TEMPLATE = """
<?xml version="1.0"?>
<file id="env_lilac.xml" version="2.0">
  <group id="run_glc">
    <entry id="GLC_TWO_WAY_COUPLING" value="FALSE">
      <type>logical</type>
      <valid_values>TRUE,FALSE</valid_values>
    </entry>
  </group>
</file>
"""

###############################################################################
def parse_command_line(args, description):
###############################################################################

    """Parse the command line, return rundir"""

    parser = argparse.ArgumentParser(formatter_class=argparse.RawTextHelpFormatter,
                                     description=description)

    parser.add_argument("--rundir", type=str, default=os.getcwd(),
                        help="specify the full path of the run directory")

    arguments = parser.parse_args(args)

    # check if rundir exists
    if not os.path.isdir(arguments.rundir):
        raise RuntimeError("rundir {} does not exist".format(arguments.rundir))

    return arguments.rundir

###############################################################################
def get_config_value(config, section, item, file_path):
    """Get a given item from a given section of the config object

    Give a helpful error message if we can't find the given section or item

    Note that the file_path argument is only used for the sake of the error message
    """
    try:
        val = config.get(section, item)
    except NoSectionError:
        print("ERROR: Config file {} must contain section '{}'\n".format(file_path, section))
        raise
    except NoOptionError:
        print("ERROR: Config file {} must contain item '{}' in section '{}'\n".format(
            file_path, item, section))
        raise
    return val

###############################################################################
def buildnml(rundir, bldnmldir):
###############################################################################

    """Build the ctsm namelist"""

    # pylint: disable=too-many-locals

    file_path = os.path.join(rundir, 'ctsm.cfg')

    # read the config file
    config = ConfigParser()
    config.read(file_path)

    clm_phys = get_config_value(config, 'buildnml_input', 'clm_phys', file_path)
    start_type = get_config_value(config, 'buildnml_input', 'start_type', file_path)
    start_ymd = get_config_value(config, 'buildnml_input', 'start_ymd', file_path)
    configuration = get_config_value(config, 'buildnml_input', 'configuration', file_path)
    structure = get_config_value(config, 'buildnml_input', 'structure', file_path)
    ccsm_co2_ppmv = get_config_value(config, 'buildnml_input', 'ccsm_co2_ppmv', file_path)
    clm_co2_type = get_config_value(config, 'buildnml_input', 'clm_co2_type', file_path)
    clm_bldnml_opts = get_config_value(config, 'buildnml_input', 'clm_bldnml_opts', file_path)
    use_case = get_config_value(config, 'buildnml_input', 'use_case', file_path)
    lnd_tuning_mode = get_config_value(config, 'buildnml_input', 'lnd_tuning_mode', file_path)
    spinup = get_config_value(config, 'buildnml_input', 'spinup', file_path)
    gridmask = get_config_value(config, 'buildnml_input', 'gridmask', file_path)
    lnd_grid = get_config_value(config, 'buildnml_input', 'lnd_grid', file_path)
    lnd_domain_file = get_config_value(config, 'buildnml_input', 'lnd_domain_file', file_path)
    lnd_domain_path = get_config_value(config, 'buildnml_input', 'lnd_domain_path', file_path)
    din_loc_root = get_config_value(config, 'buildnml_input', 'din_loc_root', file_path)
    clm_namelist_opts = get_config_value(config, 'buildnml_input', 'clm_namelist_opts', file_path)

    # create config_cache.xml file
    # Note that build-namelist utilizes the contents of the config_cache.xml file in
    # the namelist_defaults.xml file to obtain namelist variables
    config_cache = os.path.join(rundir, "config_cache.xml")
    config_cache_text = _CONFIG_CACHE_TEMPLATE.format(clm_phys=clm_phys)
    with open(config_cache, 'w') as tempfile:
        tempfile.write(config_cache_text)

    # create temporary env_lilac.xml
    env_lilac = os.path.join(rundir, "env_lilac.xml")
    env_lilac_text = _ENV_LILAC_TEMPLATE.format()
    with open(env_lilac, 'w') as tempfile:
        tempfile.write(env_lilac_text)

    # remove any existing clm.input_data_list file
    inputdatalist_path = os.path.join(rundir, "clm.input_data_list")
    os.remove(inputdatalist_path)

    # call build-namelist
    cmd = os.path.abspath(os.path.join(bldnmldir, os.pardir, "bld", "build-namelist"))
    command = [cmd,
               '-csmdata', din_loc_root,
               '-inputdata', inputdatalist_path,
               '-namelist', '&clm_inparm  start_ymd={} {}/'.format(start_ymd, clm_namelist_opts),
               '-use_case', use_case,
               '-ignore_ic_year', # For now, we assume ignore_ic_year, not ignore_ic_date
               '-res', lnd_grid,
               '-clm_start_type', start_type,
               '-l_ncpl', str(1),  # this will not be used in lilac - but is needed as input
               '-configuration', configuration,
               '-structure', structure,
               '-lnd_frac', os.path.join(lnd_domain_path, lnd_domain_file),
               '-glc_nec', str(10),
               '-co2_ppmv', ccsm_co2_ppmv,
               '-co2_type', clm_co2_type,
               '-clm_accelerated_spinup', spinup,
               '-lnd_tuning_mode', lnd_tuning_mode,
               '-no-megan',  # Eventually make this dynamic (see https://github.com/ESCOMP/CTSM/issues/926)
               '-config', os.path.join(rundir, "config_cache.xml"),
               '-envxml_dir', rundir]
    command.extend(clm_bldnml_opts.split())
    if gridmask not in ('null', 'UNSET'):
        command.extend(['-mask', gridmask])

    subprocess.check_call(command,
                          universal_newlines=True)

    # remove temporary files in rundir
    os.remove(os.path.join(rundir, "config_cache.xml"))
    os.remove(os.path.join(rundir, "env_lilac.xml"))
    os.remove(os.path.join(rundir, "drv_flds_in"))

###############################################################################
def main():
    """Main function"""

    rundir = parse_command_line(sys.argv[1:], __doc__)
    bldnmldir = os.path.dirname(os.path.abspath(__file__))
    buildnml(rundir, bldnmldir)


###############################################################################

if __name__ == "__main__":
    main()
