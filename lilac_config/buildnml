#!/usr/bin/env python3

"""
CTSM namelist creator
"""

import sys, os, subprocess, argparse

from configparser import ConfigParser
from configparser import NoSectionError, NoOptionError

_config_cache_template = """
<?xml version="1.0"?>
<config_definition>
<commandline></commandline>
<entry id="phys" value="{clm_phys}" list="" valid_values="clm4_5,clm5_0">Specifies clm physics</entry>
</config_definition>
"""

# Note the following is needed in env_lilac.xml otherwise the following error appears in the call to build_namelist
#err=ERROR : CLM build-namelist::CLMBuildNamelist::logical_to_fortran() : Unexpected value in logical_to_fortran:

_env_lilac_template = """
<?xml version="1.0"?>
<file id="env_lilac.xml" version="2.0">
  <group id="run_glc">
    <entry id="GLC_TWO_WAY_COUPLING" value="FALSE">
      <type>logical</type>
      <valid_values>TRUE,FALSE</valid_values>
    </entry>
  </group>
</file>
"""

_hack=object()

###############################################################################
def parse_command_line(args, description):
###############################################################################

    parser = argparse.ArgumentParser(formatter_class=argparse.RawTextHelpFormatter, description=description)

    parser.add_argument("--rundir", type=str, default=os.getcwd(),
                        help="specify the full path of the run directory")

    arguments = parser.parse_args(args)

    # check if rundir exists
    if not os.path.isdir(arguments.rundir):
        raise Exception("rundir %s does not exist".format(arguments.rundir))

    return arguments.rundir

###############################################################################
def buildnml(rundir, bldnmldir):
###############################################################################

    """Build the ctsm namelist """

    file_path = os.path.join(rundir,'ctsm.cfg') 

    # read the config file
    config = ConfigParser()
    config.read(file_path)

    clm_phys          = config.get('buildnml_input', 'clm_phys')
    start_type        = config.get('buildnml_input', 'start_type')
    start_ymd         = config.get('buildnml_input', 'start_ymd')
    startfile_type    = config.get('buildnml_input', 'startfile_type')
    ignore            = config.get('buildnml_input', 'ignore')
    configuration     = config.get('buildnml_input', 'configuration')
    structure         = config.get('buildnml_input', 'structure')
    ccsm_co2_ppmv     = config.get('buildnml_input', 'ccsm_co2_ppmv')
    clm_co2_type      = config.get('buildnml_input', 'clm_co2_type')
    clm_bldnml_opts   = config.get('buildnml_input', 'clm_bldnml_opts')
    use_case          = config.get('buildnml_input', 'use_case')
    lnd_tuning_mode   = config.get('buildnml_input', 'lnd_tuning_mode')
    spinup            = config.get('buildnml_input', 'spinup')
    gridmask          = config.get('buildnml_input', 'gridmask')
    lnd_grid          = config.get('buildnml_input', 'lnd_grid')
    lnd_domain_file   = config.get('buildnml_input', 'lnd_domain_file')
    lnd_domain_path   = config.get('buildnml_input', 'lnd_domain_path')
    din_loc_root      = config.get('buildnml_input', 'din_loc_root')
    clm_namelist_opts = config.get('buildnml_input', 'clm_namelist_opts')

    # create config_cache.xml file 
    # Note that build-namelist utilizes the contents of the config_cache.xml file in 
    # the namelist_defaults.xml file to obtain namelist variables
    config_cache   = os.path.join(rundir, "config_cache.xml")
    config_cache_text = _config_cache_template.format(clm_phys=clm_phys)
    with open(config_cache, 'w') as tempfile:
        tempfile.write(config_cache_text)

    # create temporary env_lilac.xml
    env_lilac = os.path.join(rundir, "env_lilac.xml")
    env_lilac_text = _env_lilac_template.format()
    with open(env_lilac, 'w') as tempfile:
        tempfile.write(env_lilac_text)

    # call build-namelist
    cmd = os.path.abspath(os.path.join(bldnmldir, os.pardir, "bld","build-namelist"))
    command = [cmd,
               '-csmdata', din_loc_root, 
               '-inputdata', os.path.join(rundir, "clm.input_data_list"), 
               '-namelist', '&clm_inparm  start_ymd={} {}/'.format(start_ymd, clm_namelist_opts),
               '-use_case',use_case,
               '-res', lnd_grid, 
               '-clm_start_type', start_type, 
               '-l_ncpl', str(1),  # this will not be used in lilac - but is needed as input
               '-configuration', configuration, 
               '-structure', structure,
               '-lnd_frac', os.path.join(lnd_domain_path,lnd_domain_file),
               '-glc_nec', str(10), 
               '-co2_ppmv', ccsm_co2_ppmv,
               '-co2_type', clm_co2_type, 
               '-clm_accelerated_spinup', spinup,
               '-lnd_tuning_mode',lnd_tuning_mode,
               '-config',os.path.join(rundir, "config_cache.xml"),
               '-envxml_dir', rundir]
    command.extend(clm_bldnml_opts.split())
    if gridmask != 'null' and gridmask != 'UNSET':
        command.extend(['-mask', gridmask])

    subprocess.check_call(command,
                          universal_newlines=True)

    # remove temporary files in rundir
    os.remove(os.path.join(rundir, "config_cache.xml"))
    os.remove(os.path.join(rundir, "env_lilac.xml"))
    os.remove(os.path.join(rundir, "drv_flds_in"))

###############################################################################

if __name__ == "__main__":
    rundir = parse_command_line(sys.argv[1:], __doc__)
    bldnmldir = os.path.dirname(os.path.abspath(__file__))
    buildnml(rundir, bldnmldir)


